########################################################################
1. INTRODUCTION

The Json class is a simple class for parsing JSON data into a QVariant 
hierarchies. Now, we can also reverse the process and serialize
QVariant hierarchies into valid JSON data.


########################################################################
2. HOW TO INSTALL/UNINSTALL

The parser is really easy to install. There is 2 ways to install it:
A) Classic way, with QtCreator then command line
B) Expert way, entirely in command line
C) Uninstall mode, in command line

------------------------------------------------------------------------
A) Classic way aka. noob way
- Double-Click on "QtJSON.pro" file, in the extracted directory
- Build the release version of the library with Qt:
-- Select "QtJSON [...] Release" in the selector on the left pane
   (or by pressing "ctrl+T" or "cmd+T")
-- Build the lib: "Compile > Compile the project"
   (or by pressing "ctrl+B" or "cmd+B")
- Open a terminal in the lib directory (where the lib have been compiled)
- Type "make install" in the terminal
- AAAAAAAND it's done.

B) Expert way aka. MeIzHacker way
- Open a terminal in the source directory (where the .pro file stands)
- type these commands:
-- qmake
-- make
-- make install
- AAAAAAAND it's done.

C) Uninstall mode
- Open a terminal in the compiled source directory
  (if you've installed it by the "Classic Way") or source directory
  (for the Expert way)
- Type: make uninstall
------------------------------------------------------------------------
NB: Don't forget to:
1) #include <qtjson/json.h>
2) Link the QtJson lib to your project by adding to your .pro file:
   LIBS += -lqtjson


########################################################################
3. HOW TO USE

The parser is really easy to use. Let's say we have the following 
QString of JSON data:

------------------------------------------------------------------------
{
   "encoding" : "UTF-8",
   "plug-ins" : [
      "python",
      "c++",
      "ruby"
   ],
   "indent" : {
      "length" : 3,
      "use_space" : true
   }
}
------------------------------------------------------------------------

We would first call the parse-method:

------------------------------------------------------------------------
//Say that we're using the QtJson namespace
using namespace QtJson;
bool ok;
//json is a QString containing the JSON data
QVariantMap result = Json::parse(json, ok).toMap();

if(!ok) {
    qFatal("An error occurred during parsing");
    exit(1);
}
------------------------------------------------------------------------

Assuming the parsing process completed without errors, we would then
go through the hierarchy:

------------------------------------------------------------------------
qDebug() << "encoding:" << result["encoding"].toString();
qDebug() << "plugins:";

foreach(QVariant plugin, result["plug-ins"].toList()) {
    qDebug() << "\t-" << plugin.toString();
}

QVariantMap nestedMap = result["indent"].toMap();
qDebug() << "length:" << nestedMap["length"].toInt();
qDebug() << "use_space:" << nestedMap["use_space"].toBool();
------------------------------------------------------------------------

The previous code would print out the following:

------------------------------------------------------------------------
encoding: "UTF-8"
plugins:
  - "python"
  - "c++"
  - "ruby"
length: 3
use_space: true
------------------------------------------------------------------------

To write JSON data from Qt object is as simple as parsing:

------------------------------------------------------------------------
QVariantMap map;
map["name"] = "Name";
map["age"] = 22;

QByteArray data = Json::serialize(map);
------------------------------------------------------------------------

The byte array 'data' contains valid JSON data:

------------------------------------------------------------------------
{
        name: "Luis Gustavo",
        age: 22,
}
------------------------------------------------------------------------


########################################################################
4. CONTRIBUTING

The code is available to download at GitHub. Contribute if you dare!
